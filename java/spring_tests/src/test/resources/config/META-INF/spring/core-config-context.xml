<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
  xmlns:jdbc="http://www.springframework.org/schema/jdbc"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:p="http://www.springframework.org/schema/p"
  xsi:schemaLocation="
  	http://www.springframework.org/schema/jdbc 
  	http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
  	http://www.springframework.org/schema/beans 
  	http://www.springframework.org/schema/beans/spring-beans-2.0.xsd 
  	http://www.springframework.org/schema/tx
  	http://www.springframework.org/schema/tx/spring-tx-2.0.xsd 
  	http://www.springframework.org/schema/aop 
  	http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
  	http://www.springframework.org/schema/util 
  	http://www.springframework.org/schema/util/spring-util-2.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-2.5.xsd">

	<description>basic spring application context file</description>
	
	<context:annotation-config />  
	   
  	<bean id="simplestBean" class="com.entrepidea.spring.ioc.SimplestBean" />

	<!-- example of Spring using static factory method to instantialize a bean -->
	<bean id="clientService" class="com.entrepidea.spring.ioc.ClientService" factory-method="createInstance"/>
	
	
	<!-- example of merging collection of parent/child beans -->
	<bean id="parent" abstract="true" class="com.entrepidea.spring.ioc.ComplexObject">
        <property name="adminEmails">
            <props>
                <prop key="administrator">administrator@example.com</prop>
                <prop key="support">support@example.com</prop>
            </props>
        </property>
    </bean>
    <bean id="child" parent="parent">
        <property name="adminEmails">
            <!-- the merge is specified on the child collection definition -->
            <props merge="true">
                <prop key="sales">sales@example.com</prop>
                <prop key="support">support@example.co.uk</prop>
            </props>
        </property>
    </bean>
    
    
    <!--  example of using p-namespace. It needs to be declared but not need to specify the xsd; -->
    <!-- look at the special ref: spouse-ref, it's the property + ref -->
     <bean name="john-classic" class="com.entrepidea.spring.ioc.Person">
        <property name="name" value="John Doe"/>
        <property name="spouse" ref="jane"/>
    </bean>
    <bean name="john-modern"
        class="com.entrepidea.spring.ioc.Person"
        p:name="John Doe"
        p:spouse-ref="jane"/>

    <bean name="jane" class="com.entrepidea.spring.ioc.Person">
        <property name="name" value="Jane Doe"/>
    </bean>
    
    <!--  test how to use depend-on property -->
    <bean id="dependOnBean" class="com.entrepidea.spring.ioc.SimplestBean" depends-on="manager" />
    <bean id="manager" class="com.entrepidea.spring.ioc.ManagerBean" />
    
    <bean id="command" class="com.entrepidea.spring.ioc.AsyncCommand" scope="prototype" />
    
    <!-- example of method injection -->
    <bean id="commandManager" class="com.entrepidea.spring.ioc.CommandManager">
    	<lookup-method name="createCommand" bean="command"/>
    </bean>
    
    <!--  example of bean with prototype scope -->
    <bean id="prototypeBean" class="com.entrepidea.spring.ioc.PrototypeBean" scope="prototype" />
    <bean id="prototypeClient" class="com.entrepidea.spring.ioc.PrototypeClient">
    	<property name="bean1" ref="prototypeBean"/>
    	<property name="bean2" ref="prototypeBean"/>
    	<property name="bean3" ref="prototypeBean"/>
    </bean>
    
   
    
    
    <!--  example of bean inheritance, be noted that the parent doesnt need to have a corresponding class if it's defined as abstract="true" -->
    <bean id="parentWithoutClass" abstract="true">
    	<property name="name" value="father"/>
    	<property name="age" value="56" />
    </bean>
    
    <bean id="deriveBean" class="com.entrepidea.spring.ioc.DeriveBean" parent="parentWithoutClass">
    	<property name="name" value="son"/>
    </bean>
    
    
    
    
    <!-- SpEL testing beans  -->
    <bean id="spelParser" class="com.entrepidea.spring.spel.HelloWorldParser"/>
    
    
    
<!--  	<jdbc:embedded-database id="dataSource" type="H2"/>
	<tx:annotation-driven transaction-manager="transactionManager" />
	<context:component-scan base-package="com.entrepidea.spring" /> 
 -->  
 
  <!--  example of testing the life cycle of a bean, using the class to test -->
<!--     <bean id="lc1" class="com.entrepidea.spring.ioc.LifecycleBean1"/>
    <bean id="lc2" class="com.entrepidea.spring.ioc.LifecycleBean2"/> -->
    
          
 </beans>  
