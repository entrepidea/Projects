<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="
  	http://www.springframework.org/schema/beans
  	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-2.5.xsd
	http://www.springframework.org/schema/p
	http://www.springframework.org/schema/p/spring-context-2.5.xsd
	http://www.springframework.org/schema/c
	http://www.springframework.org/schema/c/spring-context-2.5.xsd">

	<description>basic spring application context file</description>
	
	<context:annotation-config />  

	
	<bean id="parent" abstract="true" class="com.entrepidea.spring.core.ioc.supports.ComplexObject">
        <property name="adminEmails">
            <props>
                <prop key="administrator">administrator@example.com</prop>
                <prop key="support">support@example.com</prop>
            </props>
        </property>
    </bean>
    <bean id="child" parent="parent">
        <property name="adminEmails">
            <!-- the merge is specified on the child collection definition -->
            <props merge="true">
                <prop key="sales">sales@example.com</prop>
                <prop key="support">support@example.co.uk</prop>
            </props>
        </property>
    </bean>

    <bean id="clientService" class="com.entrepidea.spring.core.ioc.supports.ClientService" init-method="createInstance"/>
    <bean id="clientService2" class="com.entrepidea.spring.core.ioc.supports.ClientService" init-method="createInstance"/>


    <bean id="p_namespace" class="com.entrepidea.spring.core.ioc.supports.ClientService" init-method="createInstance" p:email="support@FakeCompany.com"/>

    <bean id="foo" class="com.entrepidea.spring.core.ioc.supports.Foo">
        <constructor-arg type="int" value="1"/>
        <constructor-arg type="java.lang.String" value="hello world"/>
    </bean>

    <bean id="bar" class="com.entrepidea.spring.core.ioc.supports.Bar"/>
    <bean id="baz" class="com.entrepidea.spring.core.ioc.supports.Baz"/>
    <bean id="c_namespace" class="com.entrepidea.spring.core.ioc.supports.Foo" c:bar-ref="bar" c:baz-ref="baz" />

    <bean id="foo_dependents" class="com.entrepidea.spring.core.ioc.supports.Foo" depends-on="bar,baz" p:bar-ref="bar" p:baz-ref="baz"/>

    <!--  test how to use depend-on property -->
    <bean id="manager" class="com.entrepidea.spring.core.ioc.supports.ManagerBean" />
    

    
    <!-- example of method injection -->
    <bean id="commandManager" class="com.entrepidea.spring.core.ioc.supports.CommandManager">
    	<lookup-method name="createCommand" bean="myCommand"/>
    </bean>
    <bean id="myCommand" class="com.entrepidea.spring.core.ioc.supports.AsyncCommand" scope="prototype" />
    

    <!--  example of bean inheritance, be noted that the parent doesnt need to have a corresponding class if it's defined as abstract="true" -->
    <bean id="parentWithoutClass" abstract="true">
    	<property name="name" value="father"/>
    	<property name="age" value="56" />
    </bean>
    
    <bean id="deriveBean" class="com.entrepidea.spring.core.ioc.supports.DeriveBean" parent="parentWithoutClass">
    	<property name="name" value="son"/>
    </bean>
    
    <!-- bean lifecycle tests -->
    <!-- this is to test the InitializingBean and disposableBean interface -->
    <bean id="lifecycleBean1" class="com.entrepidea.spring.core.ioc.supports.LifecycleBean1"/>
    <bean id="lifecycleBean2" class="com.entrepidea.spring.core.ioc.supports.LifecycleBean2"/>

    <bean id="student" class="com.entrepidea.spring.core.ioc.supports.Student"/>
    <bean id="name" class="java.lang.String">
        <constructor-arg value="John"/>
    </bean>



    <!-- Test PropertyPlaceHolderConfigurer -->
    <!-- see official doc: 1.8.2 Customizing configuration metadata with a BeanFactoryPostProcessor -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations" value="classpath:database/jdbc.properties"/>
    </bean>

    <bean id="basicDataSource" destroy-method="close"
          class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- SpEL testing beans  -->
    <bean id="spelParser" class="com.entrepidea.spring.core.spel.supports.HelloWorldParser"/>

 </beans>
